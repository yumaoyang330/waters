import React, { Component } from 'react';
import {  Icon, Button,Tabs,Select,DatePicker,Table,Menu,Cascader ,Layout,Row, Col ,Popconfirm,InputNumber,Form,Input} from 'antd';
import { Link } from 'react-router-dom';
import { createForm } from 'rc-form';

import moment from 'moment';
import './lowalarm.css';


const myDate = new Date();
const { Header, Sider, Content } = Layout;
const SubMenu = Menu.SubMenu;
const TabPane = Tabs.TabPane;
const Option = Select.Option;
const {RangePicker } = DatePicker;
const dateFormat = 'YYYY/MM/DD';
const options = [{
  value: 'zhejiang',
  label: '浙江省',
  children: [{
    value: 'hangzhou',
    label: '杭州市',
    children: [{
      value: 'xihu',
      label: '西湖区',
      children:[{
        value: 'xuejun',
        label: '学军中学',
      }]
    }],
  }],
}, {
  value: 'jiangsu',
  label: '江苏省',
  children: [{
    value: 'nanjing',
    label: '南京市',
    children: [{
      value: 'zhonghuamen',
      label: '中华门',
    }],
  }],
}];
const columns1 = [{
  title: '设备大小',
  dataIndex: 'equipment',
}, {
  title: '流量大小',
  dataIndex: 'flow',
}, {
  title: '报警级别',
  dataIndex: 'jibie',
},{
  title: '处理阶段',
  dataIndex: 'jd',
}, {
  title: '责任人',
  dataIndex: 'age',
}, {
  title: '责任人联系方式',
  dataIndex: '', 
  key: 'x', 
  render: () => <a href="http://www.baidu.com" target="_blank">详情</a>
},{
  title: '报警时间',
  dataIndex: 'address',
}, {
  title: '总流量',
  dataIndex: 'liuliang',
}, {
  title: '编辑状态',
  dataIndex: '', 
  key: 'x', 
  render: () =>    
  <Button style={{ marginLeft: 8 }} disabled>
    正在处理 <Icon type="down" />
  </Button>
}];
const data = [];
const number=15;
for (let i = 0; i < number; i++) {
    data.push({
      key: i,
      flow:i,
      equipment: `行政楼${i}楼饮水点`,
      age: '张三',
      liuliang:`${i}`,
      address: `London ${i}`,
      status:'正在处理',
      jibie:'6',
      jd:'正在处理'
    });
  }
function callback(key) {
    console.log(key);
  }
  function onChange(date, dateString) {
    console.log(date, dateString);
  }
  const FormItem = Form.Item;
  const EditableContext = React.createContext();
  const EditableRow = ({ form, index, ...props }) => (
    <EditableContext.Provider value={form}>
      <tr {...props} />
    </EditableContext.Provider>
  );
const EditableFormRow = Form.create()(EditableRow);
class EditableCell extends React.Component {
  getInput = () => {
    if (this.props.inputType === 'number') {
      return <InputNumber />;
    }
    return <Input />;
  };
  render() {
    const {
      editing,
      dataIndex,
      title,
      inputType,
      record,
      index,
      ...restProps
    } = this.props;
    return (
      <EditableContext.Consumer>
        {(form) => {
          const { getFieldDecorator } = form;
          return (
            <td {...restProps}>
              {editing ? (
                <FormItem style={{ margin: 0 }}>
                  {getFieldDecorator(dataIndex, {
                    rules: [{
                      required: true,
                      message: `Please Input ${title}!`,
                    }],
                    initialValue: record[dataIndex],
                  })(this.getInput())}
                </FormItem>
              ) : restProps.children}
            </td>
          );
        }}
      </EditableContext.Consumer>
    );
  }
}
class lowalarm extends Component {
  constructor(props) {
    super(props);
    this.state = {
      collapsed: false,
      size: 'small',
      num: number,
      selectedRowKeys: [],
      time:myDate,
      data, editingKey: '',
    };    
  this.columns = [{
    title: '设备位置',
    dataIndex: 'equipment',
    editable: true,
  }, {
    title: '流量大小',
    dataIndex: 'flow',
    editable: true,
  }, {
    title: '报警级别',
    dataIndex: 'jibie',
    editable: true,
  },{
    title: '处理阶段',
    dataIndex: 'jd',
    editable: true,
  }, {
    title: '责任人',
    dataIndex: 'age',
  }, {
    title: '责任人联系方式',
    dataIndex: '', 
    key: 'x', 
    render: () => <a href="http://www.baidu.com" target="_blank">详情</a>
  },{
    title: '报警时间',
    dataIndex: 'address',
    editable: true,
  }, {
    title: '总流量',
    dataIndex: 'liuliang',
    editable: true,
  }, {
    title: '编辑状态',
    dataIndex: 'operation',
    width:'10%',
    render: (text, record) => {
      const editable = this.isEditing(record);
      return (
        <div>

          {editable ? (
            <span>
              <EditableContext.Consumer>
                {form => (
                  <a
                    href="javascript:;"
                    onClick={() => this.save(form, record.key)}
                    style={{ marginRight: 8 }}
                  >
                    保存
                  </a>
                )}
              </EditableContext.Consumer>
              <Popconfirm
                title="确认要取消吗?"
                onConfirm={() => this.cancel(record.key)}
              >
                <a>取消</a>
              </Popconfirm>
            </span>
          ) : (
            <a onClick={() => this.edit(record.key)}>编辑</a>
          )}
          <span style={{marginLeft:'10px'}}>
          {data.length > 1 ?
          (
            <Popconfirm title="确定要删除吗?" onConfirm={() => this.onDelete(record.key)}>
              <a href="javascript:;">删除</a>
            </Popconfirm>
          ) : null}
          </span>
        </div>
      );
    },
      }];
  }
    isEditing = (record) => {
      return record.key === this.state.editingKey;
    };
    edit(key) {
      this.setState({ editingKey: key });
    }
    onDelete = (key) => {
      const data = [...this.state.data];
      this.setState({ 
        data: data.filter(item => item.key !== key)
      });
    } 
    save(form, key) {
      form.validateFields((error, row) => {
        if (error) {
          return;
        }
        const newData = [...this.state.data];
        const index = newData.findIndex(item => key === item.key);
        if (index > -1) {
          const item = newData[index];
          newData.splice(index, 1, {
            ...item,
            ...row,
          });
          this.setState({ data: newData, editingKey: '' });
        } else {
          newData.push(data);
          this.setState({ data: newData, editingKey: '' });
        }
      });
    }
    cancel = () => {
      this.setState({ editingKey: '' });
    }; 
  componentWillMount = () => {
    document.title = "流量报警";
  }
  onSelectChange1 = (selectedRowKeys) => {
    console.log('selectedRowKeys changed: ', selectedRowKeys);
    this.setState({ 
     selectedRowKeys
    });
  }  
  onSelectChange= (selectedRowKeys) => {
    console.log('selectedRowKeys changed: ', selectedRowKeys);
    this.setState({ 
     selectedRowKeys
    });
  }  
  toggle = () => {
    this.setState({
      collapsed: !this.state.collapsed,
    });
  }
  moredelete = (key) =>{
    key=this.state.selectedRowKeys;
    console.log(key)
    const len=key.length;
    const data = [...this.state.data];
    this.setState({ 
      selectedRowKeys: [],
      num:this.state.num-len,
      data: 
      data.filter((item) => {
      for (let i = 0; i < key.length; i++) {
      if (item.key === key[i]) {
      return false
      }
      }
      return true
      }),
    });
  }  
  

  render() {
    const { selectedRowKeys } = this.state;
    const rowSelection = {
      selectedRowKeys,
      onChange: this.onSelectChange,
    };
    const rowSelection1 = {
      selectedRowKeys,
      onChange: this.onSelectChange1,
    };
    const hasSelected = selectedRowKeys.length > 0;
    const components = {
      body: {
        row: EditableFormRow,
        cell: EditableCell,
      },
    };
    const columns = this.columns.map((col) => {
      if (!col.editable) {
        return col;
      }
      return {
        ...col,
        onCell: record => ({
          record,
          inputType: col.dataIndex === 'age' ? 'number' : 'text',
          dataIndex: col.dataIndex,
          title: col.title,
          editing: this.isEditing(record),
        }),
      };
    });
    return ( 
      <div id="lowalarmbody" >
      <Layout>
      <Sider 
        trigger={null}
        collapsible
        collapsed={this.state.collapsed}
      >
        <div className="logo" />
         <div className="lowalar-left">
         <Menu
            defaultSelectedKeys={['1']}
            defaultOpenKeys={['sub1']}
            mode="inline"
            theme="dark"
            inlineCollapsed={this.state.collapsed}
            >   
            <div className="top"></div>
            <SubMenu key="sub1" title={<span><Icon type="clock-circle-o" /><span>流程监控</span></span>}>
                <Menu.Item key="1"><Link to="/lowalarm">流量报警</Link></Menu.Item>
                <Menu.Item key="2"><Link to="/alarmsetting">流量报警设置</Link></Menu.Item>
            </SubMenu>
            <SubMenu key="sub2" title={<span><Icon type="edit" /><span>设备管理</span></span>}>
                <Menu.Item key="3"><Link to="/devInfo">设备在线查询</Link></Menu.Item>
                <Menu.Item key="4"><Link to="/management">设备管理</Link></Menu.Item>
            </SubMenu>
            <SubMenu key="sub3" title={<span><Icon type="calendar" /><span>查询管理</span></span>}>
                <Menu.Item key="5"><Link to="/process">流程查询</Link></Menu.Item>
            </SubMenu>
            <SubMenu key="sub4" title={<span><Icon type="warning" /><span>账号管理</span></span>}>
                <Menu.Item key="6"><Link to="/contact">区域联系人管理</Link></Menu.Item>
                <Menu.Item key="7"><Link to="/journal">操作日志查询</Link></Menu.Item>
                <Menu.Item key="8"><Link to="/highset">高级设置</Link></Menu.Item>
            </SubMenu>
            </Menu>
           </div>
      </Sider>
      <Layout>
        <Header style={{ background: '#fff', padding: 0 }}>
            <div className="switch-btn">
                <Button type="primary"  onClick={this.toggle} style={{ marginLeft:"16px",  }}>
                <Icon
              className="trigger"
              type={this.state.collapsed ? 'menu-unfold' : 'menu-fold'}
            />
              </Button>
            </div>
            <div className="Administrator">
              <Icon type="search" />
                <Icon type="bell" />
                <span></span>管理员
            </div>        
        </Header>
        <div className="nav">
      流程监控 / 流量报警
        </div>
        <div className="tit">
          报警查询
        </div>
        <Content style={{ margin: '24px 16px', background: '#fff', minHeight: 280,marginTop:'10px' }}>
        <div className="current">
                <div className="curr">
                <Tabs onChange={callback} type="card">
                    <TabPane tab="当前" key="1">
                        <div className="current_text">
                            <div className="current_textt">
                            位置选择:<Cascader defaultValue={['zhejiang', 'hangzhou', 'xihu','xuejun']} options={options} onChange={onChange}  style={{marginLeft:'20px'}}/>
                            </div>
                            <div className="current-time">
                            <Row gutter={16}>
                              <Col className="gutter-row" span={18}>
                              时间选择:
                              <RangePicker 
                                style={{marginLeft:'20px'}}  
                                defaultValue={[moment(this.state.time, dateFormat), moment(this.state.time, dateFormat)]}
                                format={dateFormat}
                                  ranges={{ 今天: [moment(), moment()], '本月': [moment().startOf('month'), moment().endOf('month')] }}
                                  onChange={onChange}
                                />  
                              </Col>
                              <Col className="gutter-row" span={6}>
                              <Button type="primary" style={{marginRight:'10px'}}>查询</Button>  
                                <Button>重置</Button>
                              </Col>
                            </Row>
                            </div>
                            <div className="derive">
                            <Icon type="info-circle-o" />                                
                               &nbsp; &nbsp;已加载<span style={{ marginLeft: 8 ,color:'rgba(0, 51, 255, 0.647058823529412)',fontWeight:'bold'}}>
                               {hasSelected ? `   ${selectedRowKeys.length}  ` : ''}
                                </span>条记录
                                列表记录总计： <span style={{color:'rgba(0, 51, 255, 0.647058823529412)',fontWeight:'bold'}}>{this.state.num}</span> 条
                            <Button type="primary" style={{float:'right',marginTop:'3px'}}>数据导出</Button> 
                            </div>
                            <div style={{marginTop:'10px'}}>
                                <Table rowSelection={rowSelection1} columns={columns1} dataSource={data}  />
                            </div>
                        </div>   
                    </TabPane>
                    <TabPane tab="历史" key="2">
                    <div className="current_text">
                            <div className="current_textt">
                            位置选择:<Cascader defaultValue={['zhejiang', 'hangzhou', 'xihu','xuejun']} options={options} onChange={onChange}  style={{marginLeft:'20px'}}/>
                            </div>
                            <div className="current-time">
                            时间选择:
                              <RangePicker 
                                style={{marginLeft:'20px'}}  
                                defaultValue={[moment(this.state.time, dateFormat), moment(this.state.time, dateFormat)]}
                                format={dateFormat}
                                  ranges={{ 今天: [moment(), moment()], '本月': [moment().startOf('month'), moment().endOf('month')] }}
                                  onChange={onChange}
                                />  
                                <div style={{float:"right"}}>
                                <Popconfirm title="确定要删除吗?" onConfirm={() => this.moredelete()}>
                                      <Button  style={{background:"rgba(204, 0, 0, 1)",color:'white',border:'none',marginRight:'20px'}}>
                                      批量删除</Button>  
                                      </Popconfirm>
                                <Button type="primary" style={{marginRight:'20px'}}>查询</Button>  
                                <Button>重置</Button>
                                </div>
                            </div>
                            <div className="derive">
                            <Icon type="info-circle-o" />                                
                            &nbsp; &nbsp;已加载<span style={{ marginLeft: 8 ,color:'rgba(0, 51, 255, 0.647058823529412)',fontWeight:'bold'}}>
                               {hasSelected ? `   ${selectedRowKeys.length}  ` : ''}
                                </span>条记录
                                列表记录总计： <span style={{color:'rgba(0, 51, 255, 0.647058823529412)',fontWeight:'bold'}}>{this.state.num}</span> 条
                            <Button type="primary" style={{float:'right',marginTop:'3px'}}>数据导出</Button> 
                            </div>
                            <div style={{marginTop:'10px'}}>
                                <Table rowSelection={rowSelection} columns={columns} dataSource={data}  />
                            </div>
                        </div>   
                    </TabPane>
                </Tabs>
                </div>
           </div>      
        </Content>
      </Layout>
    </Layout>   
</div>    
    )
  }
}

export default lowalarm = createForm()(lowalarm);

